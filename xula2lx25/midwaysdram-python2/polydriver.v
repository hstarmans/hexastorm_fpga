// File: polydriver.v
// Generated by MyHDL 1.0dev
// Date: Sat Jan 28 16:27:51 2017


`timescale 1ns/10ps

module polydriver (
    clock,
    reset,
    photodiodepin,
    polypin,
    laserpin,
    start,
    sdram_clk_o,
    sdram_clk_i
);


input clock;
input reset;
input photodiodepin;
output polypin;
reg polypin;
output laserpin;
reg laserpin;
input start;
output sdram_clk_o;
wire sdram_clk_o;
input sdram_clk_i;

reg [16:0] counter_photodiode;
reg [16:0] counter_value;
wire [15:0] host_intf_data_i;
wire host_intf_rd_i;
reg [9:0] counter_line;
wire val;
reg laserpin_mem;
wire [23:0] host_intf_addr_i;
reg [23:0] counter_speed;
wire [15:0] host_intf_data_o;
wire memreset;
reg [26:0] address;
reg rd_enable;
wire host_intf_wr_i;
wire wr_enable;
wire host_intf_done_o;
wire host_intf_rst_i;
reg [12:0] counter_polygon;
reg sdram_cntl_1_sdatadir_r;
reg [12:0] sdram_cntl_1_saddr_x;
reg [1:0] sdram_cntl_1_wrtimer_x;
reg sdram_cntl_1_sd_intf_dqml;
reg [12:0] sdram_cntl_1_saddr_r;
reg sdram_cntl_1_sd_intf_ras;
reg [2:0] sdram_cntl_1_cmd_x;
reg [12:0] sdram_cntl_1_sd_intf_addr;
reg sdram_cntl_1_wr_in_progress_s;
reg sdram_cntl_1_rd_in_progress_s;
reg sdram_cntl_1_activate_in_progress_s;
reg sdram_cntl_1_sdatadir_x;
reg [0:0] sdram_cntl_1_reftimer_x;
reg sdram_cntl_1_sd_intf_cke;
reg [1:0] sdram_cntl_1_activebank_r;
reg [1:0] sdram_cntl_1_sd_intf_bs;
wire [1:0] sdram_cntl_1_ba_x;
reg sdram_cntl_1_sd_intf_dqmh;
reg [1:0] sdram_cntl_1_wrtimer_r;
reg [0:0] sdram_cntl_1_rastimer_x;
reg sdram_cntl_1_sd_intf_we;
reg [13:0] sdram_cntl_1_rfshcntr_r;
wire [12:0] sdram_cntl_1_row_s;
wire [15:0] sdram_cntl_1_sd_intf_dq;
reg [2:0] sdram_cntl_1_state_x;
reg [4:0] sdram_cntl_1_wrpipeline_x;
reg [1:0] sdram_cntl_1_activebank_x;
reg [0:0] sdram_cntl_1_timer_r;
reg sdram_cntl_1_doactivate_s;
reg [0:0] sdram_cntl_1_rastimer_r;
reg [13:0] sdram_cntl_1_rfshcntr_x;
reg sdram_cntl_1_sd_intf_cs;
reg [15:0] sdram_cntl_1_sdramdata_r;
reg [4:0] sdram_cntl_1_rdpipeline_r;
wire [1:0] sdram_cntl_1_bank_s;
reg [1:0] sdram_cntl_1_ba_r;
reg sdram_cntl_1_sd_intf_cas;
reg [4:0] sdram_cntl_1_rdpipeline_x;
wire [15:0] sdram_cntl_1_sdata_x;
reg [0:0] sdram_cntl_1_reftimer_r;
reg [0:0] sdram_cntl_1_timer_x;
reg [15:0] sdram_cntl_1_sdramdata_x;
reg [15:0] sdram_cntl_1_sdata_r;
wire [8:0] sdram_cntl_1_col_s;
reg [15:0] sdram_cntl_1_sdriver;
wire sdram_cntl_1_host_intf_rdPending_o;
reg [4:0] sdram_cntl_1_wrpipeline_r;
reg [2:0] sdram_cntl_1_state_r;
reg [2:0] sdram_cntl_1_cmd_r;
reg sdram_cntl_1_activeflag_r [0:4-1];
reg sdram_cntl_1_activeflag_x [0:4-1];
reg [12:0] sdram_cntl_1_activerow_r [0:4-1];
reg [12:0] sdram_cntl_1_activerow_x [0:4-1];

assign val = 1'd0;
assign memreset = 1'd0;
assign wr_enable = 1'd0;
assign sdram_cntl_1_sd_intf_dq = sdram_cntl_1_sdriver;



assign sdram_clk_o = clock;


always @(posedge clock, posedge reset) begin: POLYDRIVER_POLYGEN
    if (reset == 1) begin
        counter_polygon <= 0;
        polypin <= 0;
    end
    else begin
        if (($signed({1'b0, counter_polygon}) >= (6000 - 1))) begin
            counter_polygon <= 0;
            polypin <= (!polypin);
        end
        else begin
            counter_polygon <= (counter_polygon + 1);
        end
    end
end



assign host_intf_rst_i = memreset;
assign host_intf_wr_i = (wr_enable && (!host_intf_done_o));
assign host_intf_rd_i = (rd_enable && (!host_intf_done_o));
assign host_intf_data_i = val;
assign host_intf_addr_i = address;


always @(posedge sdram_clk_i) begin: POLYDRIVER_SDRAM_READER
    if ((start == 0)) begin
        laserpin_mem <= 0;
    end
    else begin
        if ((host_intf_done_o == 0)) begin
            rd_enable <= 1'b1;
        end
        else begin
            rd_enable <= 1'b0;
            address[5-1:0] <= counter_photodiode[15-1:10];
            address[15-1:5] <= counter_line;
            laserpin_mem <= host_intf_data_o[0];
        end
    end
end


always @(posedge clock, posedge reset) begin: POLYDRIVER_COUNT
    if (reset == 1) begin
        counter_photodiode <= 0;
        counter_value <= 0;
    end
    else begin
        if (((photodiodepin == 1) && (counter_photodiode > 16200))) begin
            counter_value <= counter_photodiode;
            counter_photodiode <= 0;
        end
        else if (($signed({1'b0, counter_photodiode}) >= (120000 - 1))) begin
            counter_photodiode <= 0;
        end
        else begin
            counter_photodiode <= (counter_photodiode + 1);
        end
    end
end


always @(sdram_cntl_1_sdatadir_r, sdram_cntl_1_saddr_r, sdram_cntl_1_wr_in_progress_s, sdram_cntl_1_rd_in_progress_s, sdram_cntl_1_activate_in_progress_s, sdram_cntl_1_activeflag_r[0], sdram_cntl_1_activeflag_r[1], sdram_cntl_1_activeflag_r[2], sdram_cntl_1_activeflag_r[3], sdram_cntl_1_reftimer_r, sdram_cntl_1_ba_x, sdram_cntl_1_wrtimer_r, sdram_cntl_1_activerow_r[0], sdram_cntl_1_activerow_r[1], sdram_cntl_1_activerow_r[2], sdram_cntl_1_activerow_r[3], sdram_cntl_1_rfshcntr_r, sdram_cntl_1_row_s, sdram_cntl_1_timer_r, host_intf_rd_i, sdram_cntl_1_doactivate_s, sdram_cntl_1_rastimer_r, sdram_cntl_1_cmd_r, sdram_cntl_1_rdpipeline_r, sdram_cntl_1_bank_s, sdram_cntl_1_ba_r, sdram_cntl_1_activebank_r, sdram_cntl_1_col_s, host_intf_wr_i, sdram_cntl_1_state_r) begin: POLYDRIVER_SDRAM_CNTL_1_COMB_FUNC
    integer index;
    sdram_cntl_1_rdpipeline_x = {1'b0, sdram_cntl_1_rdpipeline_r[(3 + 2)-1:1]};
    sdram_cntl_1_wrpipeline_x = 5'h0;
    if ((sdram_cntl_1_rastimer_r != 0)) begin
        sdram_cntl_1_rastimer_x = (sdram_cntl_1_rastimer_r - 1);
    end
    else begin
        sdram_cntl_1_rastimer_x = sdram_cntl_1_rastimer_r;
    end
    if ((sdram_cntl_1_wrtimer_r != 0)) begin
        sdram_cntl_1_wrtimer_x = (sdram_cntl_1_wrtimer_r - 1);
    end
    else begin
        sdram_cntl_1_wrtimer_x = sdram_cntl_1_wrtimer_r;
    end
    if ((sdram_cntl_1_reftimer_r != 0)) begin
        sdram_cntl_1_reftimer_x = (sdram_cntl_1_reftimer_r - 1);
        sdram_cntl_1_rfshcntr_x = sdram_cntl_1_rfshcntr_r;
    end
    else begin
        sdram_cntl_1_reftimer_x = 0;
        sdram_cntl_1_rfshcntr_x = (sdram_cntl_1_rfshcntr_r + 1);
    end
    sdram_cntl_1_cmd_x = sdram_cntl_1_cmd_r;
    sdram_cntl_1_state_x = sdram_cntl_1_state_r;
    sdram_cntl_1_saddr_x = sdram_cntl_1_saddr_r;
    sdram_cntl_1_activebank_x = sdram_cntl_1_activebank_r;
    sdram_cntl_1_sdatadir_x = sdram_cntl_1_sdatadir_r;
    for (index=0; index<(2 ** 2); index=index+1) begin
        sdram_cntl_1_activeflag_x[index] = sdram_cntl_1_activeflag_r[index];
        sdram_cntl_1_activerow_x[index] = sdram_cntl_1_activerow_r[index];
    end
    if ((sdram_cntl_1_timer_r != 0)) begin
        sdram_cntl_1_timer_x = (sdram_cntl_1_timer_r - 1);
        sdram_cntl_1_cmd_x = 7;
    end
    else begin
        sdram_cntl_1_timer_x = sdram_cntl_1_timer_r;
        case (sdram_cntl_1_state_r)
            3'b000: begin
                sdram_cntl_1_timer_x = 0;
                sdram_cntl_1_state_x = 3'b001;
            end
            3'b001: begin
                sdram_cntl_1_cmd_x = 2;
                sdram_cntl_1_timer_x = 0;
                sdram_cntl_1_state_x = 3'b011;
                sdram_cntl_1_saddr_x = 512;
                sdram_cntl_1_rfshcntr_x = 8;
            end
            3'b011: begin
                sdram_cntl_1_cmd_x = 1;
                sdram_cntl_1_timer_x = 0;
                sdram_cntl_1_rfshcntr_x = (sdram_cntl_1_rfshcntr_r - 1);
                if ((sdram_cntl_1_rfshcntr_r == 1)) begin
                    sdram_cntl_1_state_x = 3'b010;
                end
            end
            3'b010: begin
                sdram_cntl_1_cmd_x = 0;
                sdram_cntl_1_timer_x = 2;
                sdram_cntl_1_state_x = 3'b100;
                sdram_cntl_1_saddr_x = 48;
            end
            3'b100: begin
                if ((sdram_cntl_1_rfshcntr_r != 0)) begin
                    if (((!sdram_cntl_1_activate_in_progress_s) && (!sdram_cntl_1_wr_in_progress_s) && (!sdram_cntl_1_rd_in_progress_s))) begin
                        sdram_cntl_1_cmd_x = 2;
                        sdram_cntl_1_timer_x = 0;
                        sdram_cntl_1_state_x = 3'b110;
                        sdram_cntl_1_saddr_x = 512;
                        for (index=0; index<(2 ** 2); index=index+1) begin
                            sdram_cntl_1_activeflag_x[index] = 1'b0;
                        end
                    end
                end
                else if (host_intf_rd_i) begin
                    if ((sdram_cntl_1_ba_x == sdram_cntl_1_ba_r)) begin
                        if (sdram_cntl_1_doactivate_s) begin
                            if (((!sdram_cntl_1_activate_in_progress_s) && (!sdram_cntl_1_wr_in_progress_s) && (!sdram_cntl_1_rd_in_progress_s))) begin
                                sdram_cntl_1_cmd_x = 2;
                                sdram_cntl_1_timer_x = 0;
                                sdram_cntl_1_state_x = 3'b101;
                                sdram_cntl_1_saddr_x = 0;
                                sdram_cntl_1_activeflag_x[sdram_cntl_1_bank_s] = 1'b0;
                            end
                        end
                        else if ((!sdram_cntl_1_rd_in_progress_s)) begin
                            sdram_cntl_1_cmd_x = 5;
                            sdram_cntl_1_sdatadir_x = 1'b0;
                            sdram_cntl_1_saddr_x = sdram_cntl_1_col_s;
                            sdram_cntl_1_rdpipeline_x = {1'b1, sdram_cntl_1_rdpipeline_r[(3 + 2)-1:1]};
                        end
                    end
                end
                else if (host_intf_wr_i) begin
                    if ((sdram_cntl_1_ba_x == sdram_cntl_1_ba_r)) begin
                        if (sdram_cntl_1_doactivate_s) begin
                            if (((!sdram_cntl_1_activate_in_progress_s) && (!sdram_cntl_1_wr_in_progress_s) && (!sdram_cntl_1_rd_in_progress_s))) begin
                                sdram_cntl_1_cmd_x = 2;
                                sdram_cntl_1_timer_x = 0;
                                sdram_cntl_1_state_x = 3'b101;
                                sdram_cntl_1_saddr_x = 0;
                                sdram_cntl_1_activeflag_x[sdram_cntl_1_bank_s] = 1'b0;
                            end
                        end
                        else if ((!sdram_cntl_1_rd_in_progress_s)) begin
                            sdram_cntl_1_cmd_x = 4;
                            sdram_cntl_1_sdatadir_x = 1'b1;
                            sdram_cntl_1_saddr_x = sdram_cntl_1_col_s;
                            sdram_cntl_1_wrpipeline_x = 5'h1;
                            sdram_cntl_1_wrtimer_x = 2;
                        end
                    end
                end
                else begin
                    sdram_cntl_1_cmd_x = 7;
                    sdram_cntl_1_state_x = 3'b100;
                end
            end
            3'b101: begin
                sdram_cntl_1_cmd_x = 3;
                sdram_cntl_1_timer_x = 0;
                sdram_cntl_1_state_x = 3'b100;
                sdram_cntl_1_rastimer_x = 0;
                sdram_cntl_1_saddr_x = sdram_cntl_1_row_s;
                sdram_cntl_1_activebank_x = sdram_cntl_1_bank_s;
                sdram_cntl_1_activerow_x[sdram_cntl_1_bank_s] = sdram_cntl_1_row_s;
                sdram_cntl_1_activeflag_x[sdram_cntl_1_bank_s] = 1'b1;
            end
            3'b110: begin
                sdram_cntl_1_cmd_x = 1;
                sdram_cntl_1_timer_x = 0;
                sdram_cntl_1_state_x = 3'b100;
                sdram_cntl_1_rfshcntr_x = (sdram_cntl_1_rfshcntr_r - 1);
            end
            default: begin
                sdram_cntl_1_state_x = 3'b000;
            end
        endcase
    end
end


always @(posedge sdram_clk_i, posedge host_intf_rst_i) begin: POLYDRIVER_SDRAM_CNTL_1_SEQ_FUNC
    integer index;
    if (host_intf_rst_i == 1) begin
        sdram_cntl_1_sdatadir_r <= 0;
        sdram_cntl_1_sdata_r <= 0;
        sdram_cntl_1_reftimer_r <= 0;
        sdram_cntl_1_saddr_r <= 0;
        sdram_cntl_1_timer_r <= 0;
        sdram_cntl_1_wrtimer_r <= 0;
        sdram_cntl_1_activerow_r[0] <= 0;
        sdram_cntl_1_activerow_r[1] <= 0;
        sdram_cntl_1_activerow_r[2] <= 0;
        sdram_cntl_1_activerow_r[3] <= 0;
        sdram_cntl_1_rastimer_r <= 0;
        sdram_cntl_1_cmd_r <= 7;
        sdram_cntl_1_sdramdata_r <= 0;
        sdram_cntl_1_wrpipeline_r <= 0;
        sdram_cntl_1_rdpipeline_r <= 0;
        sdram_cntl_1_rfshcntr_r <= 0;
        sdram_cntl_1_activeflag_r[0] <= 0;
        sdram_cntl_1_activeflag_r[1] <= 0;
        sdram_cntl_1_activeflag_r[2] <= 0;
        sdram_cntl_1_activeflag_r[3] <= 0;
        sdram_cntl_1_ba_r <= 0;
        sdram_cntl_1_state_r <= 3'b000;
        sdram_cntl_1_activebank_r <= 0;
    end
    else begin
        sdram_cntl_1_state_r <= sdram_cntl_1_state_x;
        sdram_cntl_1_cmd_r <= sdram_cntl_1_cmd_x;
        sdram_cntl_1_saddr_r <= sdram_cntl_1_saddr_x;
        sdram_cntl_1_sdata_r <= sdram_cntl_1_sdata_x;
        sdram_cntl_1_sdatadir_r <= sdram_cntl_1_sdatadir_x;
        sdram_cntl_1_activebank_r <= sdram_cntl_1_activebank_x;
        sdram_cntl_1_sdramdata_r <= sdram_cntl_1_sdramdata_x;
        sdram_cntl_1_wrpipeline_r <= sdram_cntl_1_wrpipeline_x;
        sdram_cntl_1_rdpipeline_r <= sdram_cntl_1_rdpipeline_x;
        sdram_cntl_1_ba_r <= sdram_cntl_1_ba_x;
        sdram_cntl_1_timer_r <= sdram_cntl_1_timer_x;
        sdram_cntl_1_rastimer_r <= sdram_cntl_1_rastimer_x;
        sdram_cntl_1_reftimer_r <= sdram_cntl_1_reftimer_x;
        sdram_cntl_1_wrtimer_r <= sdram_cntl_1_wrtimer_x;
        sdram_cntl_1_rfshcntr_r <= sdram_cntl_1_rfshcntr_x;
        for (index=0; index<(2 ** 2); index=index+1) begin
            sdram_cntl_1_activerow_r[index] <= sdram_cntl_1_activerow_x[index];
            sdram_cntl_1_activeflag_r[index] <= sdram_cntl_1_activeflag_x[index];
        end
    end
end


always @(sdram_cntl_1_saddr_r, sdram_cntl_1_sdatadir_r, sdram_cntl_1_cmd_r, sdram_cntl_1_bank_s, sdram_cntl_1_sdata_r) begin: POLYDRIVER_SDRAM_CNTL_1_SDRAM_PIN_MAP
    sdram_cntl_1_sd_intf_cke = 1;
    sdram_cntl_1_sd_intf_cs = 0;
    sdram_cntl_1_sd_intf_ras = sdram_cntl_1_cmd_r[2];
    sdram_cntl_1_sd_intf_cas = sdram_cntl_1_cmd_r[1];
    sdram_cntl_1_sd_intf_we = sdram_cntl_1_cmd_r[0];
    sdram_cntl_1_sd_intf_bs = sdram_cntl_1_bank_s;
    sdram_cntl_1_sd_intf_addr = sdram_cntl_1_saddr_r;
    if ((sdram_cntl_1_sdatadir_r == 1'b1)) begin
        sdram_cntl_1_sdriver = sdram_cntl_1_sdata_r;
    end
    else begin
        sdram_cntl_1_sdriver = 'bz;
    end
    sdram_cntl_1_sd_intf_dqml = 0;
    sdram_cntl_1_sd_intf_dqmh = 0;
end



assign host_intf_done_o = (sdram_cntl_1_rdpipeline_r[0] || sdram_cntl_1_wrpipeline_r[0]);
assign host_intf_data_o = sdram_cntl_1_sdramdata_r;
assign sdram_cntl_1_host_intf_rdPending_o = sdram_cntl_1_rd_in_progress_s;
assign sdram_cntl_1_sdata_x = host_intf_data_i;



assign sdram_cntl_1_bank_s = host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign sdram_cntl_1_ba_x = host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign sdram_cntl_1_row_s = host_intf_addr_i[(13 + 9)-1:9];
assign sdram_cntl_1_col_s = host_intf_addr_i[9-1:0];


always @(sdram_cntl_1_sd_intf_dq, sdram_cntl_1_activerow_r[0], sdram_cntl_1_activerow_r[1], sdram_cntl_1_activerow_r[2], sdram_cntl_1_activerow_r[3], sdram_cntl_1_wrtimer_r, sdram_cntl_1_rastimer_r, sdram_cntl_1_sdramdata_r, sdram_cntl_1_rdpipeline_r, sdram_cntl_1_bank_s, sdram_cntl_1_row_s, sdram_cntl_1_activeflag_r[0], sdram_cntl_1_activeflag_r[1], sdram_cntl_1_activeflag_r[2], sdram_cntl_1_activeflag_r[3], sdram_cntl_1_activebank_r) begin: POLYDRIVER_SDRAM_CNTL_1_DO_ACTIVE
    if (((sdram_cntl_1_bank_s != sdram_cntl_1_activebank_r) || (sdram_cntl_1_row_s != sdram_cntl_1_activerow_r[sdram_cntl_1_bank_s]) || (!sdram_cntl_1_activeflag_r[sdram_cntl_1_bank_s]))) begin
        sdram_cntl_1_doactivate_s = 1'b1;
    end
    else begin
        sdram_cntl_1_doactivate_s = 1'b0;
    end
    if ((sdram_cntl_1_rdpipeline_r[1] == 1'b1)) begin
        sdram_cntl_1_sdramdata_x = sdram_cntl_1_sd_intf_dq;
    end
    else begin
        sdram_cntl_1_sdramdata_x = sdram_cntl_1_sdramdata_r;
    end
    if ((sdram_cntl_1_rastimer_r != 0)) begin
        sdram_cntl_1_activate_in_progress_s = 1'b1;
    end
    else begin
        sdram_cntl_1_activate_in_progress_s = 1'b0;
    end
    if ((sdram_cntl_1_wrtimer_r != 0)) begin
        sdram_cntl_1_wr_in_progress_s = 1'b1;
    end
    else begin
        sdram_cntl_1_wr_in_progress_s = 1'b0;
    end
    if ((sdram_cntl_1_rdpipeline_r[(3 + 2)-1:1] != 0)) begin
        sdram_cntl_1_rd_in_progress_s = 1'b1;
    end
    else begin
        sdram_cntl_1_rd_in_progress_s = 1'b0;
    end
end


always @(posedge clock) begin: POLYDRIVER_LINECOUNT
    if ((reset == 1)) begin
        counter_line <= 0;
    end
    else begin
        if (($signed({1'b0, counter_speed}) >= (12000000 - 1))) begin
            counter_speed <= 0;
            if (($signed({1'b0, counter_line}) >= (1000 - 1))) begin
                counter_line <= counter_line;
            end
            else begin
                counter_line <= (counter_line + 1);
            end
        end
        else begin
            counter_speed <= (counter_speed + 1);
        end
    end
end


always @(counter_photodiode, counter_value, reset, laserpin_mem) begin: POLYDRIVER_SWITCHLASER
    if ((reset == 1)) begin
        laserpin = 0;
    end
    else begin
        if ((counter_photodiode < 16200)) begin
            laserpin = 0;
        end
        else begin
            if (($signed({1'b0, counter_photodiode}) >= ($signed({1'b0, counter_value}) - (counter_value >>> 10)))) begin
                laserpin = 1;
            end
            else begin
                laserpin = laserpin_mem;
            end
        end
    end
end

endmodule
