-- File: polydriver.vhd
-- Generated by MyHDL 1.0dev
-- Date: Wed Aug 30 17:46:43 2017


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_10.all;

entity polydriver is
    port (
        clock: in std_logic;
        reset: in std_logic;
        photodiodepin: in std_logic;
        polypin: inout std_logic;
        laserpin: out std_logic;
        start: in std_logic;
        sdram_clk_o: out std_logic;
        sdram_clk_i: in std_logic;
        sdram_cntl_1_sd_intf_dqml: out std_logic;
        sdram_cntl_1_sd_intf_cas: out std_logic;
        sdram_cntl_1_sd_intf_cs: out std_logic;
        sdram_cntl_1_sd_intf_ras: out std_logic;
        sdram_cntl_1_sd_intf_dqmh: out std_logic;
        sdram_cntl_1_sd_intf_we: out std_logic;
        sdram_cntl_1_sd_intf_bs: out unsigned(1 downto 0);
        sdram_cntl_1_sd_intf_cke: out std_logic;
        sdram_cntl_1_sd_intf_addr: out unsigned(12 downto 0);
        sdram_cntl_1_sd_intf_dq: inout unsigned(15 downto 0)
    );
end entity polydriver;


architecture MyHDL of polydriver is


type t_enum_cntlstatetype_1 is (
    INITWAIT,
    INITPCHG,
    INITSETMODE,
    INITRFSH,
    RW,
    ACTIVATE,
    REFRESHROW,
    SELFREFRESH
);
signal rd_enable: std_logic;
signal host_intf_data_o: unsigned(15 downto 0);
signal counter_line: unsigned(9 downto 0);
signal host_intf_done_o: std_logic;
signal host_intf_wr_i: std_logic;
signal value: unsigned(15 downto 0);
signal host_intf_addr_i: unsigned(23 downto 0);
signal address: unsigned(26 downto 0);
signal memreset: std_logic;
signal host_intf_rd_i: std_logic;
signal host_intf_data_i: unsigned(15 downto 0);
signal counter_photodiode: unsigned(15 downto 0);
signal laserpin_mem: std_logic;
signal counter_facet: unsigned(1 downto 0);
signal counter_polygon: unsigned(13 downto 0);
signal counter_speed: unsigned(23 downto 0);
signal counter_trigger: unsigned(15 downto 0);
signal host_intf_rst_i: std_logic;
signal wr_enable: std_logic;
signal val: std_logic;
signal sdram_cntl_1_sdata_r: unsigned(15 downto 0);
signal sdram_cntl_1_timer_r: unsigned(10 downto 0);
signal sdram_cntl_1_doactivate_s: std_logic;
signal sdram_cntl_1_activate_in_progress_s: std_logic;
signal sdram_cntl_1_wrpipeline_r: unsigned(4 downto 0);
signal sdram_cntl_1_reftimer_r: unsigned(9 downto 0);
signal sdram_cntl_1_wr_in_progress_s: std_logic;
signal sdram_cntl_1_rfshcntr_x: unsigned(13 downto 0);
signal sdram_cntl_1_sdatadir_x: std_logic;
signal sdram_cntl_1_bank_s: unsigned(1 downto 0);
signal sdram_cntl_1_rd_in_progress_s: std_logic;
signal sdram_cntl_1_state_x: t_enum_cntlstatetype_1;
signal sdram_cntl_1_sdramdata_r: unsigned(15 downto 0);
signal sdram_cntl_1_rdpipeline_x: unsigned(4 downto 0);
signal sdram_cntl_1_cmd_r: unsigned(2 downto 0);
signal sdram_cntl_1_wrpipeline_x: unsigned(4 downto 0);
signal sdram_cntl_1_rastimer_x: unsigned(2 downto 0);
signal sdram_cntl_1_row_s: unsigned(12 downto 0);
signal sdram_cntl_1_host_intf_rdPending_o: std_logic;
signal sdram_cntl_1_sdata_x: unsigned(15 downto 0);
signal sdram_cntl_1_activebank_x: unsigned(1 downto 0);
signal sdram_cntl_1_reftimer_x: unsigned(9 downto 0);
signal sdram_cntl_1_sdatadir_r: std_logic;
signal sdram_cntl_1_rfshcntr_r: unsigned(13 downto 0);
signal sdram_cntl_1_wrtimer_x: unsigned(1 downto 0);
signal sdram_cntl_1_sdramdata_x: unsigned(15 downto 0);
signal sdram_cntl_1_timer_x: unsigned(10 downto 0);
signal sdram_cntl_1_saddr_x: unsigned(12 downto 0);
signal sdram_cntl_1_col_s: unsigned(8 downto 0);
signal sdram_cntl_1_state_r: t_enum_cntlstatetype_1;
signal sdram_cntl_1_ba_r: unsigned(1 downto 0);
signal sdram_cntl_1_rastimer_r: unsigned(2 downto 0);
signal sdram_cntl_1_sdriver: unsigned(15 downto 0);
signal sdram_cntl_1_activebank_r: unsigned(1 downto 0);
signal sdram_cntl_1_rdpipeline_r: unsigned(4 downto 0);
signal sdram_cntl_1_saddr_r: unsigned(12 downto 0);
signal sdram_cntl_1_ba_x: unsigned(1 downto 0);
signal sdram_cntl_1_wrtimer_r: unsigned(1 downto 0);
signal sdram_cntl_1_cmd_x: unsigned(2 downto 0);
type t_array_sdram_cntl_1_activerow_x is array(0 to 4-1) of unsigned(12 downto 0);
signal sdram_cntl_1_activerow_x: t_array_sdram_cntl_1_activerow_x;
type t_array_sdram_cntl_1_activerow_r is array(0 to 4-1) of unsigned(12 downto 0);
signal sdram_cntl_1_activerow_r: t_array_sdram_cntl_1_activerow_r;
type t_array_sdram_cntl_1_activeflag_x is array(0 to 4-1) of std_logic;
signal sdram_cntl_1_activeflag_x: t_array_sdram_cntl_1_activeflag_x;
type t_array_sdram_cntl_1_activeflag_r is array(0 to 4-1) of std_logic;
signal sdram_cntl_1_activeflag_r: t_array_sdram_cntl_1_activeflag_r;

begin


memreset <= '0';
wr_enable <= '0';
val <= '0';

sdram_cntl_1_sd_intf_dq <= sdram_cntl_1_sdriver;

POLYDRIVER_LINECOUNT: process (clock) is
begin
    if rising_edge(clock) then
        if (reset = '1') then
            counter_line <= to_unsigned(0, 10);
        elsif (signed(resize(counter_speed, 25)) >= (12000000 - 1)) then
            counter_speed <= to_unsigned(0, 24);
            if (signed(resize(counter_line, 11)) >= (1000 - 1)) then
                counter_line <= counter_line;
            else
                counter_line <= (counter_line + 1);
            end if;
        else
            counter_speed <= (counter_speed + 1);
        end if;
    end if;
end process POLYDRIVER_LINECOUNT;

POLYDRIVER_POLYGEN: process (clock, reset) is
begin
    if (reset = '1') then
        polypin <= '0';
        counter_polygon <= to_unsigned(0, 14);
    elsif rising_edge(clock) then
        if (signed(resize(counter_polygon, 15)) >= (15000 - 1)) then
            counter_polygon <= to_unsigned(0, 14);
            polypin <= stdl((not bool(polypin)));
        else
            counter_polygon <= (counter_polygon + 1);
        end if;
    end if;
end process POLYDRIVER_POLYGEN;

POLYDRIVER_SWITCHLASER: process (laserpin_mem, reset, counter_photodiode, value) is
begin
    if (reset = '1') then
        laserpin <= '0';
    elsif (counter_photodiode < 18000) then
        laserpin <= '0';
    elsif (signed(resize(counter_photodiode, 17)) >= (signed(resize(value, 17)) - signed(shift_right(resize(value, 17), 7)))) then
        laserpin <= '1';
    else
        laserpin <= laserpin_mem;
    end if;
end process POLYDRIVER_SWITCHLASER;

POLYDRIVER_SDRAM_CNTL_1_COMB_FUNC: process (sdram_cntl_1_wr_in_progress_s, sdram_cntl_1_timer_r, sdram_cntl_1_doactivate_s, sdram_cntl_1_sdatadir_r, sdram_cntl_1_activate_in_progress_s, sdram_cntl_1_activerow_r, sdram_cntl_1_bank_s, host_intf_wr_i, sdram_cntl_1_reftimer_r, sdram_cntl_1_rd_in_progress_s, sdram_cntl_1_cmd_r, sdram_cntl_1_row_s, sdram_cntl_1_rfshcntr_r, sdram_cntl_1_activeflag_r, host_intf_rd_i, sdram_cntl_1_state_r, sdram_cntl_1_ba_r, sdram_cntl_1_col_s, sdram_cntl_1_rastimer_r, sdram_cntl_1_activebank_r, sdram_cntl_1_rdpipeline_r, sdram_cntl_1_saddr_r, sdram_cntl_1_ba_x, sdram_cntl_1_wrtimer_r) is
begin
    sdram_cntl_1_rdpipeline_x <= unsigned'('0' & sdram_cntl_1_rdpipeline_r((3 + 2)-1 downto 1));
    sdram_cntl_1_wrpipeline_x <= to_unsigned(0, 5);
    if (sdram_cntl_1_rastimer_r /= 0) then
        sdram_cntl_1_rastimer_x <= (sdram_cntl_1_rastimer_r - 1);
    else
        sdram_cntl_1_rastimer_x <= sdram_cntl_1_rastimer_r;
    end if;
    if (sdram_cntl_1_wrtimer_r /= 0) then
        sdram_cntl_1_wrtimer_x <= (sdram_cntl_1_wrtimer_r - 1);
    else
        sdram_cntl_1_wrtimer_x <= sdram_cntl_1_wrtimer_r;
    end if;
    if (sdram_cntl_1_reftimer_r /= 0) then
        sdram_cntl_1_reftimer_x <= (sdram_cntl_1_reftimer_r - 1);
        sdram_cntl_1_rfshcntr_x <= sdram_cntl_1_rfshcntr_r;
    else
        sdram_cntl_1_reftimer_x <= to_unsigned(782, 10);
        sdram_cntl_1_rfshcntr_x <= (sdram_cntl_1_rfshcntr_r + 1);
    end if;
    sdram_cntl_1_cmd_x <= sdram_cntl_1_cmd_r;
    sdram_cntl_1_state_x <= sdram_cntl_1_state_r;
    sdram_cntl_1_saddr_x <= sdram_cntl_1_saddr_r;
    sdram_cntl_1_activebank_x <= sdram_cntl_1_activebank_r;
    sdram_cntl_1_sdatadir_x <= sdram_cntl_1_sdatadir_r;
    for index in 0 to (2 ** 2)-1 loop
        sdram_cntl_1_activeflag_x(index) <= sdram_cntl_1_activeflag_r(index);
        sdram_cntl_1_activerow_x(index) <= sdram_cntl_1_activerow_r(index);
    end loop;
    if (sdram_cntl_1_timer_r /= 0) then
        sdram_cntl_1_timer_x <= (sdram_cntl_1_timer_r - 1);
        sdram_cntl_1_cmd_x <= to_unsigned(7, 3);
    else
        sdram_cntl_1_timer_x <= sdram_cntl_1_timer_r;
        case sdram_cntl_1_state_r is
            when INITWAIT =>
                sdram_cntl_1_timer_x <= to_unsigned(2000, 11);
                sdram_cntl_1_state_x <= INITPCHG;
            when INITPCHG =>
                sdram_cntl_1_cmd_x <= to_unsigned(2, 3);
                sdram_cntl_1_timer_x <= to_unsigned(2, 11);
                sdram_cntl_1_state_x <= INITRFSH;
                sdram_cntl_1_saddr_x <= to_unsigned(512, 13);
                sdram_cntl_1_rfshcntr_x <= to_unsigned(8, 14);
            when INITRFSH =>
                sdram_cntl_1_cmd_x <= to_unsigned(1, 3);
                sdram_cntl_1_timer_x <= to_unsigned(7, 11);
                sdram_cntl_1_rfshcntr_x <= (sdram_cntl_1_rfshcntr_r - 1);
                if (sdram_cntl_1_rfshcntr_r = 1) then
                    sdram_cntl_1_state_x <= INITSETMODE;
                end if;
            when INITSETMODE =>
                sdram_cntl_1_cmd_x <= to_unsigned(0, 3);
                sdram_cntl_1_timer_x <= to_unsigned(2, 11);
                sdram_cntl_1_state_x <= RW;
                sdram_cntl_1_saddr_x <= to_unsigned(48, 13);
            when RW =>
                if (sdram_cntl_1_rfshcntr_r /= 0) then
                    if ((not bool(sdram_cntl_1_activate_in_progress_s)) and (not bool(sdram_cntl_1_wr_in_progress_s)) and (not bool(sdram_cntl_1_rd_in_progress_s))) then
                        sdram_cntl_1_cmd_x <= to_unsigned(2, 3);
                        sdram_cntl_1_timer_x <= to_unsigned(2, 11);
                        sdram_cntl_1_state_x <= REFRESHROW;
                        sdram_cntl_1_saddr_x <= to_unsigned(512, 13);
                        for index in 0 to (2 ** 2)-1 loop
                            sdram_cntl_1_activeflag_x(index) <= '0';
                        end loop;
                    end if;
                elsif bool(host_intf_rd_i) then
                    if (sdram_cntl_1_ba_x = sdram_cntl_1_ba_r) then
                        if bool(sdram_cntl_1_doactivate_s) then
                            if ((not bool(sdram_cntl_1_activate_in_progress_s)) and (not bool(sdram_cntl_1_wr_in_progress_s)) and (not bool(sdram_cntl_1_rd_in_progress_s))) then
                                sdram_cntl_1_cmd_x <= to_unsigned(2, 3);
                                sdram_cntl_1_timer_x <= to_unsigned(2, 11);
                                sdram_cntl_1_state_x <= ACTIVATE;
                                sdram_cntl_1_saddr_x <= to_unsigned(0, 13);
                                sdram_cntl_1_activeflag_x(to_integer(sdram_cntl_1_bank_s)) <= '0';
                            end if;
                        elsif (not bool(sdram_cntl_1_rd_in_progress_s)) then
                            sdram_cntl_1_cmd_x <= to_unsigned(5, 3);
                            sdram_cntl_1_sdatadir_x <= '0';
                            sdram_cntl_1_saddr_x <= resize(sdram_cntl_1_col_s, 13);
                            sdram_cntl_1_rdpipeline_x <= unsigned'('1' & sdram_cntl_1_rdpipeline_r((3 + 2)-1 downto 1));
                        end if;
                    end if;
                elsif bool(host_intf_wr_i) then
                    if (sdram_cntl_1_ba_x = sdram_cntl_1_ba_r) then
                        if bool(sdram_cntl_1_doactivate_s) then
                            if ((not bool(sdram_cntl_1_activate_in_progress_s)) and (not bool(sdram_cntl_1_wr_in_progress_s)) and (not bool(sdram_cntl_1_rd_in_progress_s))) then
                                sdram_cntl_1_cmd_x <= to_unsigned(2, 3);
                                sdram_cntl_1_timer_x <= to_unsigned(2, 11);
                                sdram_cntl_1_state_x <= ACTIVATE;
                                sdram_cntl_1_saddr_x <= to_unsigned(0, 13);
                                sdram_cntl_1_activeflag_x(to_integer(sdram_cntl_1_bank_s)) <= '0';
                            end if;
                        elsif (not bool(sdram_cntl_1_rd_in_progress_s)) then
                            sdram_cntl_1_cmd_x <= to_unsigned(4, 3);
                            sdram_cntl_1_sdatadir_x <= '1';
                            sdram_cntl_1_saddr_x <= resize(sdram_cntl_1_col_s, 13);
                            sdram_cntl_1_wrpipeline_x <= to_unsigned(1, 5);
                            sdram_cntl_1_wrtimer_x <= to_unsigned(2, 2);
                        end if;
                    end if;
                else
                    sdram_cntl_1_cmd_x <= to_unsigned(7, 3);
                    sdram_cntl_1_state_x <= RW;
                end if;
            when ACTIVATE =>
                sdram_cntl_1_cmd_x <= to_unsigned(3, 3);
                sdram_cntl_1_timer_x <= to_unsigned(2, 11);
                sdram_cntl_1_state_x <= RW;
                sdram_cntl_1_rastimer_x <= to_unsigned(5, 3);
                sdram_cntl_1_saddr_x <= sdram_cntl_1_row_s;
                sdram_cntl_1_activebank_x <= sdram_cntl_1_bank_s;
                sdram_cntl_1_activerow_x(to_integer(sdram_cntl_1_bank_s)) <= sdram_cntl_1_row_s;
                sdram_cntl_1_activeflag_x(to_integer(sdram_cntl_1_bank_s)) <= '1';
            when REFRESHROW =>
                sdram_cntl_1_cmd_x <= to_unsigned(1, 3);
                sdram_cntl_1_timer_x <= to_unsigned(7, 11);
                sdram_cntl_1_state_x <= RW;
                sdram_cntl_1_rfshcntr_x <= (sdram_cntl_1_rfshcntr_r - 1);
            when others =>
                sdram_cntl_1_state_x <= INITWAIT;
        end case;
    end if;
end process POLYDRIVER_SDRAM_CNTL_1_COMB_FUNC;

POLYDRIVER_SDRAM_CNTL_1_SEQ_FUNC: process (sdram_clk_i, host_intf_rst_i) is
begin
    if (host_intf_rst_i = '1') then
        sdram_cntl_1_state_r <= INITWAIT;
        sdram_cntl_1_sdata_r <= to_unsigned(0, 16);
        sdram_cntl_1_sdramdata_r <= to_unsigned(0, 16);
        sdram_cntl_1_timer_r <= to_unsigned(0, 11);
        sdram_cntl_1_ba_r <= to_unsigned(0, 2);
        sdram_cntl_1_cmd_r <= to_unsigned(7, 3);
        sdram_cntl_1_rastimer_r <= to_unsigned(0, 3);
        sdram_cntl_1_sdatadir_r <= '0';
        sdram_cntl_1_activebank_r <= to_unsigned(0, 2);
        sdram_cntl_1_activerow_r(0) <= to_unsigned(0, 13);
        sdram_cntl_1_activerow_r(1) <= to_unsigned(0, 13);
        sdram_cntl_1_activerow_r(2) <= to_unsigned(0, 13);
        sdram_cntl_1_activerow_r(3) <= to_unsigned(0, 13);
        sdram_cntl_1_wrpipeline_r <= to_unsigned(0, 5);
        sdram_cntl_1_rdpipeline_r <= to_unsigned(0, 5);
        sdram_cntl_1_saddr_r <= to_unsigned(0, 13);
        sdram_cntl_1_reftimer_r <= to_unsigned(782, 10);
        sdram_cntl_1_rfshcntr_r <= to_unsigned(0, 14);
        sdram_cntl_1_wrtimer_r <= to_unsigned(0, 2);
        sdram_cntl_1_activeflag_r(0) <= '0';
        sdram_cntl_1_activeflag_r(1) <= '0';
        sdram_cntl_1_activeflag_r(2) <= '0';
        sdram_cntl_1_activeflag_r(3) <= '0';
    elsif rising_edge(sdram_clk_i) then
        sdram_cntl_1_state_r <= sdram_cntl_1_state_x;
        sdram_cntl_1_cmd_r <= sdram_cntl_1_cmd_x;
        sdram_cntl_1_saddr_r <= sdram_cntl_1_saddr_x;
        sdram_cntl_1_sdata_r <= sdram_cntl_1_sdata_x;
        sdram_cntl_1_sdatadir_r <= sdram_cntl_1_sdatadir_x;
        sdram_cntl_1_activebank_r <= sdram_cntl_1_activebank_x;
        sdram_cntl_1_sdramdata_r <= sdram_cntl_1_sdramdata_x;
        sdram_cntl_1_wrpipeline_r <= sdram_cntl_1_wrpipeline_x;
        sdram_cntl_1_rdpipeline_r <= sdram_cntl_1_rdpipeline_x;
        sdram_cntl_1_ba_r <= sdram_cntl_1_ba_x;
        sdram_cntl_1_timer_r <= sdram_cntl_1_timer_x;
        sdram_cntl_1_rastimer_r <= sdram_cntl_1_rastimer_x;
        sdram_cntl_1_reftimer_r <= sdram_cntl_1_reftimer_x;
        sdram_cntl_1_wrtimer_r <= sdram_cntl_1_wrtimer_x;
        sdram_cntl_1_rfshcntr_r <= sdram_cntl_1_rfshcntr_x;
        for index in 0 to (2 ** 2)-1 loop
            sdram_cntl_1_activerow_r(index) <= sdram_cntl_1_activerow_x(index);
            sdram_cntl_1_activeflag_r(index) <= sdram_cntl_1_activeflag_x(index);
        end loop;
    end if;
end process POLYDRIVER_SDRAM_CNTL_1_SEQ_FUNC;

POLYDRIVER_SDRAM_CNTL_1_SDRAM_PIN_MAP: process (sdram_cntl_1_cmd_r, sdram_cntl_1_bank_s, sdram_cntl_1_sdata_r, sdram_cntl_1_saddr_r, sdram_cntl_1_sdatadir_r) is
begin
    sdram_cntl_1_sd_intf_cke <= '1';
    sdram_cntl_1_sd_intf_cs <= '0';
    sdram_cntl_1_sd_intf_ras <= sdram_cntl_1_cmd_r(2);
    sdram_cntl_1_sd_intf_cas <= sdram_cntl_1_cmd_r(1);
    sdram_cntl_1_sd_intf_we <= sdram_cntl_1_cmd_r(0);
    sdram_cntl_1_sd_intf_bs <= sdram_cntl_1_bank_s;
    sdram_cntl_1_sd_intf_addr <= sdram_cntl_1_saddr_r;
    if (sdram_cntl_1_sdatadir_r = '1') then
        sdram_cntl_1_sdriver <= sdram_cntl_1_sdata_r;
    else
        sdram_cntl_1_sdriver <= "ZZZZZZZZZZZZZZZZ";
    end if;
    sdram_cntl_1_sd_intf_dqml <= '0';
    sdram_cntl_1_sd_intf_dqmh <= '0';
end process POLYDRIVER_SDRAM_CNTL_1_SDRAM_PIN_MAP;


host_intf_done_o <= stdl(bool(sdram_cntl_1_rdpipeline_r(0)) or bool(sdram_cntl_1_wrpipeline_r(0)));
host_intf_data_o <= sdram_cntl_1_sdramdata_r;
sdram_cntl_1_host_intf_rdPending_o <= sdram_cntl_1_rd_in_progress_s;
sdram_cntl_1_sdata_x <= host_intf_data_i;


sdram_cntl_1_bank_s <= host_intf_addr_i(((2 + 13) + 9)-1 downto (13 + 9));
sdram_cntl_1_ba_x <= host_intf_addr_i(((2 + 13) + 9)-1 downto (13 + 9));
sdram_cntl_1_row_s <= host_intf_addr_i((13 + 9)-1 downto 9);
sdram_cntl_1_col_s <= host_intf_addr_i(9-1 downto 0);

POLYDRIVER_SDRAM_CNTL_1_DO_ACTIVE: process (sdram_cntl_1_sdramdata_r, sdram_cntl_1_rastimer_r, sdram_cntl_1_activebank_r, sdram_cntl_1_row_s, sdram_cntl_1_activerow_r, sdram_cntl_1_bank_s, sdram_cntl_1_rdpipeline_r, sdram_cntl_1_sd_intf_dq, sdram_cntl_1_wrtimer_r, sdram_cntl_1_activeflag_r) is
begin
    if ((sdram_cntl_1_bank_s /= sdram_cntl_1_activebank_r) or (sdram_cntl_1_row_s /= sdram_cntl_1_activerow_r(to_integer(sdram_cntl_1_bank_s))) or (not bool(sdram_cntl_1_activeflag_r(to_integer(sdram_cntl_1_bank_s))))) then
        sdram_cntl_1_doactivate_s <= '1';
    else
        sdram_cntl_1_doactivate_s <= '0';
    end if;
    if (sdram_cntl_1_rdpipeline_r(1) = '1') then
        sdram_cntl_1_sdramdata_x <= sdram_cntl_1_sd_intf_dq;
    else
        sdram_cntl_1_sdramdata_x <= sdram_cntl_1_sdramdata_r;
    end if;
    if (sdram_cntl_1_rastimer_r /= 0) then
        sdram_cntl_1_activate_in_progress_s <= '1';
    else
        sdram_cntl_1_activate_in_progress_s <= '0';
    end if;
    if (sdram_cntl_1_wrtimer_r /= 0) then
        sdram_cntl_1_wr_in_progress_s <= '1';
    else
        sdram_cntl_1_wr_in_progress_s <= '0';
    end if;
    if (sdram_cntl_1_rdpipeline_r((3 + 2)-1 downto 1) /= 0) then
        sdram_cntl_1_rd_in_progress_s <= '1';
    else
        sdram_cntl_1_rd_in_progress_s <= '0';
    end if;
end process POLYDRIVER_SDRAM_CNTL_1_DO_ACTIVE;


sdram_clk_o <= clock;


host_intf_rst_i <= memreset;
host_intf_wr_i <= stdl(bool(wr_enable) and (not bool(host_intf_done_o)));
host_intf_rd_i <= stdl(bool(rd_enable) and (not bool(host_intf_done_o)));
host_intf_data_i <= to_unsigned(val, 16);
host_intf_addr_i <= resize(address, 24);

POLYDRIVER_COUNT: process (clock, reset) is
begin
    if (reset = '1') then
        counter_trigger <= to_unsigned(0, 16);
        counter_facet <= to_unsigned(0, 2);
        counter_photodiode <= to_unsigned(0, 16);
        value <= to_unsigned(0, 16);
    elsif rising_edge(clock) then
        if (signed(resize(counter_photodiode, 17)) >= (45045 - 1)) then
            counter_photodiode <= to_unsigned(0, 16);
            counter_trigger <= to_unsigned(0, 16);
        elsif ((photodiodepin = '1') and ((counter_photodiode > 44955) and (counter_photodiode < 45045))) then
            if (counter_trigger > 1) then
                value <= (counter_photodiode - 1);
                counter_photodiode <= to_unsigned(0, 16);
                counter_trigger <= to_unsigned(0, 16);
                if (signed(resize(counter_facet, 3)) >= (4 - 1)) then
                    counter_facet <= to_unsigned(0, 2);
                else
                    counter_facet <= (counter_facet + 1);
                end if;
            else
                counter_trigger <= (counter_trigger + 1);
                counter_photodiode <= (counter_photodiode + 1);
            end if;
        else
            counter_photodiode <= (counter_photodiode + 1);
            counter_trigger <= to_unsigned(0, 16);
        end if;
    end if;
end process POLYDRIVER_COUNT;

POLYDRIVER_SDRAM_READER: process (sdram_clk_i) is
begin
    if rising_edge(sdram_clk_i) then
        if (start = '1') then
            laserpin_mem <= '0';
        else
            if (host_intf_done_o = '0') then
                rd_enable <= '1';
            else
                rd_enable <= '0';
                address(8-1 downto 0) <= counter_photodiode(16-1 downto (16 - 8));
                address((8 + 5)-1 downto 8) <= resize(counter_line, 5);
                address(27-1 downto (8 + 5)) <= to_unsigned(0, 14);
                laserpin_mem <= host_intf_data_o(0);
            end if;
        end if;
    end if;
end process POLYDRIVER_SDRAM_READER;

end architecture MyHDL;
