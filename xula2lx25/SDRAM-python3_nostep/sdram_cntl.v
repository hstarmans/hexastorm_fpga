// File: sdram_cntl.v
// Generated by MyHDL 1.0dev
// Date: Thu Feb  2 11:23:29 2017


`timescale 1ns/10ps

module sdram_cntl (
    clk_i,
    host_intf_rd_i,
    host_intf_rdPending_o,
    host_intf_wr_i,
    host_intf_addr_i,
    host_intf_done_o,
    host_intf_data_o,
    host_intf_data_i,
    host_intf_rst_i,
    sd_intf_cke,
    sd_intf_we,
    sd_intf_ras,
    sd_intf_addr,
    sd_intf_bs,
    sd_intf_dq,
    sd_intf_cs,
    sd_intf_dqml,
    sd_intf_dqmh,
    sd_intf_cas
);


input clk_i;
input host_intf_rd_i;
output host_intf_rdPending_o;
wire host_intf_rdPending_o;
input host_intf_wr_i;
input [23:0] host_intf_addr_i;
output host_intf_done_o;
wire host_intf_done_o;
output [15:0] host_intf_data_o;
wire [15:0] host_intf_data_o;
input [15:0] host_intf_data_i;
input host_intf_rst_i;
output sd_intf_cke;
reg sd_intf_cke;
output sd_intf_we;
reg sd_intf_we;
output sd_intf_ras;
reg sd_intf_ras;
output [12:0] sd_intf_addr;
reg [12:0] sd_intf_addr;
output [1:0] sd_intf_bs;
reg [1:0] sd_intf_bs;
inout [15:0] sd_intf_dq;
wire [15:0] sd_intf_dq;
output sd_intf_cs;
reg sd_intf_cs;
output sd_intf_dqml;
reg sd_intf_dqml;
output sd_intf_dqmh;
reg sd_intf_dqmh;
output sd_intf_cas;
reg sd_intf_cas;

reg [4:0] wrpipeline_r;
wire [8:0] col_s;
wire [15:0] sdata_x;
reg [1:0] wrtimer_x;
reg [10:0] timer_r;
reg rd_in_progress_s;
reg [2:0] rastimer_x;
reg [9:0] reftimer_r;
wire [1:0] ba_x;
reg [12:0] saddr_x;
reg wr_in_progress_s;
reg [2:0] cmd_x;
reg sdatadir_r;
reg [4:0] rdpipeline_x;
wire [12:0] row_s;
reg doactivate_s;
reg [2:0] rastimer_r;
reg [13:0] rfshcntr_r;
reg [2:0] state_x;
reg [4:0] rdpipeline_r;
reg [1:0] wrtimer_r;
reg sdatadir_x;
reg [15:0] sdramdata_x;
wire [1:0] bank_s;
reg [1:0] ba_r;
reg [10:0] timer_x;
reg [15:0] sdata_r;
reg [1:0] activebank_r;
reg [9:0] reftimer_x;
reg [12:0] saddr_r;
reg [15:0] sdriver;
reg [4:0] wrpipeline_x;
reg [13:0] rfshcntr_x;
reg [1:0] activebank_x;
reg [2:0] state_r;
reg [15:0] sdramdata_r;
reg [2:0] cmd_r;
reg activate_in_progress_s;
reg activeflag_r [0:4-1];
reg [12:0] activerow_r [0:4-1];
reg [12:0] activerow_x [0:4-1];
reg activeflag_x [0:4-1];

assign sd_intf_dq = sdriver;


always @(col_s, activerow_r[0], activerow_r[1], activerow_r[2], activerow_r[3], timer_r, reftimer_r, wr_in_progress_s, ba_x, host_intf_rd_i, sdatadir_r, wrtimer_r, row_s, doactivate_s, rastimer_r, rfshcntr_r, rdpipeline_r, activeflag_r[0], activeflag_r[1], activeflag_r[2], activeflag_r[3], bank_s, ba_r, activebank_r, host_intf_wr_i, saddr_r, rd_in_progress_s, state_r, cmd_r, activate_in_progress_s) begin: SDRAM_CNTL_COMB_FUNC
    integer index;
    rdpipeline_x = {1'b0, rdpipeline_r[(3 + 2)-1:1]};
    wrpipeline_x = 5'h0;
    if ((rastimer_r != 0)) begin
        rastimer_x = (rastimer_r - 1);
    end
    else begin
        rastimer_x = rastimer_r;
    end
    if ((wrtimer_r != 0)) begin
        wrtimer_x = (wrtimer_r - 1);
    end
    else begin
        wrtimer_x = wrtimer_r;
    end
    if ((reftimer_r != 0)) begin
        reftimer_x = (reftimer_r - 1);
        rfshcntr_x = rfshcntr_r;
    end
    else begin
        reftimer_x = 782;
        rfshcntr_x = (rfshcntr_r + 1);
    end
    cmd_x = cmd_r;
    state_x = state_r;
    saddr_x = saddr_r;
    activebank_x = activebank_r;
    sdatadir_x = sdatadir_r;
    for (index=0; index<(2 ** 2); index=index+1) begin
        activeflag_x[index] = activeflag_r[index];
        activerow_x[index] = activerow_r[index];
    end
    if ((timer_r != 0)) begin
        timer_x = (timer_r - 1);
        cmd_x = 7;
    end
    else begin
        timer_x = timer_r;
        case (state_r)
            3'b000: begin
                timer_x = 2000;
                state_x = 3'b001;
            end
            3'b001: begin
                cmd_x = 2;
                timer_x = 2;
                state_x = 3'b011;
                saddr_x = 512;
                rfshcntr_x = 8;
            end
            3'b011: begin
                cmd_x = 1;
                timer_x = 7;
                rfshcntr_x = (rfshcntr_r - 1);
                if ((rfshcntr_r == 1)) begin
                    state_x = 3'b010;
                end
            end
            3'b010: begin
                cmd_x = 0;
                timer_x = 2;
                state_x = 3'b100;
                saddr_x = 48;
            end
            3'b100: begin
                if ((rfshcntr_r != 0)) begin
                    if (((!activate_in_progress_s) && (!wr_in_progress_s) && (!rd_in_progress_s))) begin
                        cmd_x = 2;
                        timer_x = 2;
                        state_x = 3'b110;
                        saddr_x = 512;
                        for (index=0; index<(2 ** 2); index=index+1) begin
                            activeflag_x[index] = 1'b0;
                        end
                    end
                end
                else if (host_intf_rd_i) begin
                    if ((ba_x == ba_r)) begin
                        if (doactivate_s) begin
                            if (((!activate_in_progress_s) && (!wr_in_progress_s) && (!rd_in_progress_s))) begin
                                cmd_x = 2;
                                timer_x = 2;
                                state_x = 3'b101;
                                saddr_x = 0;
                                activeflag_x[bank_s] = 1'b0;
                            end
                        end
                        else if ((!rd_in_progress_s)) begin
                            cmd_x = 5;
                            sdatadir_x = 1'b0;
                            saddr_x = col_s;
                            rdpipeline_x = {1'b1, rdpipeline_r[(3 + 2)-1:1]};
                        end
                    end
                end
                else if (host_intf_wr_i) begin
                    if ((ba_x == ba_r)) begin
                        if (doactivate_s) begin
                            if (((!activate_in_progress_s) && (!wr_in_progress_s) && (!rd_in_progress_s))) begin
                                cmd_x = 2;
                                timer_x = 2;
                                state_x = 3'b101;
                                saddr_x = 0;
                                activeflag_x[bank_s] = 1'b0;
                            end
                        end
                        else if ((!rd_in_progress_s)) begin
                            cmd_x = 4;
                            sdatadir_x = 1'b1;
                            saddr_x = col_s;
                            wrpipeline_x = 5'h1;
                            wrtimer_x = 2;
                        end
                    end
                end
                else begin
                    cmd_x = 7;
                    state_x = 3'b100;
                end
            end
            3'b101: begin
                cmd_x = 3;
                timer_x = 2;
                state_x = 3'b100;
                rastimer_x = 5;
                saddr_x = row_s;
                activebank_x = bank_s;
                activerow_x[bank_s] = row_s;
                activeflag_x[bank_s] = 1'b1;
            end
            3'b110: begin
                cmd_x = 1;
                timer_x = 7;
                state_x = 3'b100;
                rfshcntr_x = (rfshcntr_r - 1);
            end
            default: begin
                state_x = 3'b000;
            end
        endcase
    end
end


always @(posedge clk_i, posedge host_intf_rst_i) begin: SDRAM_CNTL_SEQ_FUNC
    integer index;
    if (host_intf_rst_i == 1) begin
        rfshcntr_r <= 0;
        wrpipeline_r <= 0;
        sdata_r <= 0;
        rdpipeline_r <= 0;
        activebank_r <= 0;
        sdatadir_r <= 0;
        activeflag_r[0] <= 0;
        activeflag_r[1] <= 0;
        activeflag_r[2] <= 0;
        activeflag_r[3] <= 0;
        activerow_r[0] <= 0;
        activerow_r[1] <= 0;
        activerow_r[2] <= 0;
        activerow_r[3] <= 0;
        wrtimer_r <= 0;
        timer_r <= 0;
        reftimer_r <= 782;
        saddr_r <= 0;
        ba_r <= 0;
        state_r <= 3'b000;
        sdramdata_r <= 0;
        cmd_r <= 7;
        rastimer_r <= 0;
    end
    else begin
        state_r <= state_x;
        cmd_r <= cmd_x;
        saddr_r <= saddr_x;
        sdata_r <= sdata_x;
        sdatadir_r <= sdatadir_x;
        activebank_r <= activebank_x;
        sdramdata_r <= sdramdata_x;
        wrpipeline_r <= wrpipeline_x;
        rdpipeline_r <= rdpipeline_x;
        ba_r <= ba_x;
        timer_r <= timer_x;
        rastimer_r <= rastimer_x;
        reftimer_r <= reftimer_x;
        wrtimer_r <= wrtimer_x;
        rfshcntr_r <= rfshcntr_x;
        for (index=0; index<(2 ** 2); index=index+1) begin
            activerow_r[index] <= activerow_x[index];
            activeflag_r[index] <= activeflag_x[index];
        end
    end
end


always @(sdatadir_r, saddr_r, bank_s, cmd_r, sdata_r) begin: SDRAM_CNTL_SDRAM_PIN_MAP
    sd_intf_cke = 1;
    sd_intf_cs = 0;
    sd_intf_ras = cmd_r[2];
    sd_intf_cas = cmd_r[1];
    sd_intf_we = cmd_r[0];
    sd_intf_bs = bank_s;
    sd_intf_addr = saddr_r;
    if ((sdatadir_r == 1'b1)) begin
        sdriver = sdata_r;
    end
    else begin
        sdriver = 'bz;
    end
    sd_intf_dqml = 0;
    sd_intf_dqmh = 0;
end



assign host_intf_done_o = (rdpipeline_r[0] || wrpipeline_r[0]);
assign host_intf_data_o = sdramdata_r;
assign host_intf_rdPending_o = rd_in_progress_s;
assign sdata_x = host_intf_data_i;



assign bank_s = host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign ba_x = host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign row_s = host_intf_addr_i[(13 + 9)-1:9];
assign col_s = host_intf_addr_i[9-1:0];


always @(rdpipeline_r, activebank_r, activeflag_r[0], activeflag_r[1], activeflag_r[2], activeflag_r[3], activerow_r[0], activerow_r[1], activerow_r[2], activerow_r[3], wrtimer_r, row_s, bank_s, sd_intf_dq, sdramdata_r, rastimer_r) begin: SDRAM_CNTL_DO_ACTIVE
    if (((bank_s != activebank_r) || (row_s != activerow_r[bank_s]) || (!activeflag_r[bank_s]))) begin
        doactivate_s = 1'b1;
    end
    else begin
        doactivate_s = 1'b0;
    end
    if ((rdpipeline_r[1] == 1'b1)) begin
        sdramdata_x = sd_intf_dq;
    end
    else begin
        sdramdata_x = sdramdata_r;
    end
    if ((rastimer_r != 0)) begin
        activate_in_progress_s = 1'b1;
    end
    else begin
        activate_in_progress_s = 1'b0;
    end
    if ((wrtimer_r != 0)) begin
        wr_in_progress_s = 1'b1;
    end
    else begin
        wr_in_progress_s = 1'b0;
    end
    if ((rdpipeline_r[(3 + 2)-1:1] != 0)) begin
        rd_in_progress_s = 1'b1;
    end
    else begin
        rd_in_progress_s = 1'b0;
    end
end

endmodule
